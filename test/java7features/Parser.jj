/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */


options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Parser)

/** Simple brace matcher. */
public class Parser {

  // to test issue #189
  private java.util.List<String> list1 = new java.util.ArrayList<String>();
  private java.util.List<String> list2 = new java.util.ArrayList<>();

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Parser parser = new Parser(System.in);
    parser.Input();
  }

  private static class Foo implements AutoCloseable {
    public void close() {
      // nothing to close
    }
  }

  private static class Bar implements AutoCloseable {
    public void close() {
      // nothing to close
    }
  }

  private static class FirstException extends RuntimeException { }
  private static class SecondException extends RuntimeException { }
}

PARSER_END(Parser)

/** Root production. */
void Input() :
{}
{

  "A"  {
     //Here we test for Java 7 language features

     //Try-with resources
     try (Foo a = new Foo()) {
       System.out.println("hello");
     } catch(Exception d) {
       System.out.println("world");
     }

     //Multiple exception catching
     try (Foo a = new Foo(); Bar b = new Bar()) {
       System.out.println("hello");
     } catch(FirstException | SecondException ex) {
       System.out.println("world");
     }

     //Underscores in numeric literals
     int     one_million = 1_000__000;
     int     cafe_babe   = 0xCAFE_BABE;
     int     zero        = 0____0;
     double  avogadro    = 6_0.22e2_2;
     double  hundred     = 1_0_0d;
             hundred     = 1_0_0.;
             hundred     = 100.;
     double  pi          = 3.141_592_65;
     double  half        = .5_0;
     double  h           = 0x4__3p4_4;

     //Binary literals
     int     binary      = 0b1001_1001;

     //Type Inference for Generic Instance Creation
     java.util.Map<String, String> m = new java.util.HashMap<>();

     //String in switch
     String s = "foo";
     switch(s) {
        case "bar":
            System.out.println("never");
     }
  } <EOF>
}
