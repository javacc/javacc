/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

This version of the GUI parsing example defines the GUI interaction as
a JavaCC grammar using tokens that are generated by a user built token
manager.  Note that these tokens appear in the parser (CalcInput.jj)
without definitions (such as <DIGIT>, <DOT>, etc.).  JavaCC does not
require token definitions when USER_TOKEN_MANAGER is set to true.  The
token manager is implemented in TokenCollector.java to extract tokens
from a producer-consumer object in ProducerConsumer.java.  The tokens
are stuffed into ProducerConsumer.java by the GUI which is defined in
CalcGUI.java.  The whole system is invoked through Main.java.

The point of this example is to illustrate:

. How a parser can be used without the standard token manager.
. The fact that tokens can be generated by entities that are not even
  streams (a GUI in this example).
. That GUI interaction can be modeled as a grammar and this grammar
  can then be used to implement the innards of a GUI based tool.

To run the calculator (which is what this example implements), do:

	javacc CalcInput.jj
	javac *.java
	java Main
