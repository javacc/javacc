\#ifndef JAVACC_H_
\#define JAVACC_H_
\#include <string>
\#include <memory>
\#include <cassert>

\#ifndef JAVACC_CHAR_TYPE
\#define JAVACC_CHAR_TYPE char
\#endif

\#ifndef JAVACC_STRING_TYPE
\#define JAVACC_STRING_TYPE std::basic_string<JAVACC_CHAR_TYPE>
\#endif

\#define JAVACC_SIMPLE_STRING std::basic_string<char>

#if NAMESPACE
namespace ${NAMESPACE_OPEN}
#fi
typedef JAVACC_STRING_TYPE StringBuffer;
typedef JAVACC_STRING_TYPE String;
typedef JAVACC_CHAR_TYPE   Character;
#if NAMESPACE
${NAMESPACE_CLOSE}
#fi

// Abstraction on stream classes to read a block of data into a buffer.
class ReaderStream {
public:
  // Read block of data into a buffer and return the actual number read.
#if NAMESPACE
  virtual size_t read(${NAMESPACE}::Character *buffer, int offset, size_t len) { return 0; }
#else
  virtual size_t read(Character *buffer, int offset, size_t len) { return 0; }
#fi
  virtual bool   endOfInput() { return true; }
  virtual ~ReaderStream() {}
};

#if NAMESPACE
const ${NAMESPACE}::Character EMPTY[] = { 0 };
#else
const Character EMPTY[] = { 0 };
#fi

\#ifndef MAX
\#define MAX(a,b) (a>=b?a:b)
\#endif
\#ifndef MIN
\#define MIN(a,b) (a<=b?a:b)
\#endif
\#ifndef null
\#define null 0
\#endif

\#endif
