<?xml version='1.0' encoding='ISO-8859-1' ?>

<!--

Copyright (c) 2006, Sun Microsystems, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Sun Microsystems, Inc. nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.

-->

<project name="javacc" default="jar" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
	<path id="maven-ant-tasks.classpath" path="lib/maven-ant-tasks-2.1.3.jar" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven-ant-tasks.classpath" />


	<property name="java-src" value="src/main/java" />
	<property name="test-src" value="src/test/java" />
	<property name="resources-src" value="src/main/resources" />
	<property name="generated-src" value="src/main/generated-sources" />
	<property name="parser-generated-src" value="${generated-src}/org/javacc/parser" />
	<property name="utils-generated-src" value="${generated-src}/org/javacc/utils" />
	<property name="jjtree-generated-src" value="${generated-src}/org/javacc/jjtree" />
	<property name="test-tmp" value="test.tmp" />

	<property name="bootstrap-jar" value="bootstrap/javacc.jar" />
	<property name="jjtree-bootstrap-class" value="org.javacc.jjtree.Main" />
	<property name="javacc-bootstrap-class" value="org.javacc.parser.Main" />

	<property name="target-folder" value="target" />

	<property file="${resources-src}/version.properties" />
	<!-- property name="version" value="${version.major}.${version.minor}.${version.patch}-SNAPSHOT" / -->
	<property name="version" value="${version.major}.${version.minor}.${version.patch}" />

	<property name="javacc" value="${target-folder}/javacc.jar" />

	<property name="javacc-vith-version" value="javacc-${version}.jar" />
	<property name="javacc-sources-jar" value="javacc-${version}-sources.jar" />
	<property name="javacc-javadoc-jar" value="javacc-${version}-javadoc.jar" />

	<property name="javacc-path" value="${target-folder}/${javacc-vith-version}" />
	<property name="javacc-sources-path" value="${target-folder}/${javacc-sources-jar}" />
	<property name="javacc-javadoc-path" value="${target-folder}/${javacc-javadoc-jar}" />

	<target name="clean">
		<delete dir="classes" />
		<delete dir="${target-folder}" />
		<delete dir="test.tmp" />
		<delete dir="dist" />
	</target>

	<target name="clean_generated_sources">
		<delete dir="${generated-src}" />
	</target>


	<target name="compile" depends="clean, clean_generated_sources">
		<mkdir dir="${generated-src}" />
		<mkdir dir="${parser-generated-src}" />
		<mkdir dir="${utils-generated-src}" />
		<mkdir dir="${jjtree-generated-src}" />

		<!-- Generate the Java CC Main Parser -->
		<java classname="${javacc-bootstrap-class}" classpath="${bootstrap-jar}" dir="${basedir}/src/main/javacc" fork="true">
			<arg value="-OUTPUT_DIRECTORY=${basedir}/${parser-generated-src}" />
			<arg value="JavaCC.jj" />
		</java>

		<!-- This class is overriden -->
		<delete file="${parser-generated-src}/Token.java" />

		<!-- Generate the JJTree Parser Definition (from the tree definition) -->
		<java classname="${jjtree-bootstrap-class}" classpath="${bootstrap-jar}" dir="${basedir}/src/main/jjtree" fork="true">
			<arg value="-OUTPUT_DIRECTORY=${basedir}/${jjtree-generated-src}" />
			<arg value="JJTree.jjt" />
		</java>

		<!-- Generate the JJTree Parser  -->
		<java classname="${javacc-bootstrap-class}" classpath="${bootstrap-jar}" dir="${basedir}/${jjtree-generated-src}" fork="true">
			<arg value="-OUTPUT_DIRECTORY=${basedir}/${jjtree-generated-src}" />
			<arg value="JJTree.jj" />
		</java>

		<!-- Delete the .jj file created by the jjtree program and the classes that were override and already added into the main source path -->
		<delete file="${jjtree-generated-src}/JJTree.jj" />
		<delete file="${jjtree-generated-src}/ASTBNF.java" />
		<delete file="${jjtree-generated-src}/ASTBNFAction.java" />
		<delete file="${jjtree-generated-src}/ASTBNFDeclaration.java" />
		<delete file="${jjtree-generated-src}/ASTBNFNodeScope.java" />
		<delete file="${jjtree-generated-src}/ASTCompilationUnit.java" />
		<delete file="${jjtree-generated-src}/ASTExpansionNodeScope.java" />
		<delete file="${jjtree-generated-src}/ASTGrammar.java" />
		<delete file="${jjtree-generated-src}/ASTJavacode.java" />
		<delete file="${jjtree-generated-src}/ASTJavacodeBody.java" />
		<delete file="${jjtree-generated-src}/ASTNodeDescriptor.java" />
		<delete file="${jjtree-generated-src}/ASTNodeDescriptorExpression.java" />
		<delete file="${jjtree-generated-src}/ASTOptionBinding.java" />
		<delete file="${jjtree-generated-src}/ASTOptions.java" />
		<delete file="${jjtree-generated-src}/JJTreeParserVisitor.java" />
		<delete file="${jjtree-generated-src}/JJTreeParserDefaultVisitor.java" />
		<delete file="${jjtree-generated-src}/Token.java" />

		<!-- Generate the Condition Parser -->
		<java classname="${javacc-bootstrap-class}" classpath="${bootstrap-jar}" dir="${basedir}/src/main/javacc" fork="true">
			<arg value="-OUTPUT_DIRECTORY=${basedir}/${utils-generated-src}" />
			<arg value="ConditionParser.jj" />
		</java>

		<mkdir dir="classes" />

		<copy todir="classes/templates">
			<fileset dir="${resources-src}/templates" />
		</copy>

		<copy file="${resources-src}/version.properties" todir="classes" />

		<javac srcdir="${java-src}" destdir="classes" debug="true" classpath="" includeantruntime='false'>
			<src path="${java-src}" />
			<src path="${generated-src}" />
			<src path="${resources-src}" />
		</javac>

	</target>

	<target name="jar" description="create javacc.jar">
		<antcall target="jar-nocompile" />
	</target>

	<!-- Be careful not to include the test files in the distribution. -->
	<target name="jar-check">
		<uptodate property="jar.uptodate" targetfile="${javacc-path}">
			<srcfiles dir="src/main" />
		</uptodate>
	</target>

	<target name="jar-nocompile" depends="jar-check" unless="jar.uptodate">
		<mkdir dir="${target-folder}" />
		<antcall target="compile" />
		<jar jarfile="${javacc}" basedir="classes" compress="true" />
		<jar jarfile="${javacc-path}" basedir="classes" compress="true" />
	</target>

	<target name="dist" depends="jar, javadoc" description="build a distribution">
		<property name="install-name" value="${target-folder}/javacc-${version}" />

		<delete file="${install-name}-distribution.tar.gz" />
		<tar destfile="${install-name}-distribution.tar.gz" compression="gzip">
			<tarfileset username="root" uid="1" group="root" prefix="javacc-${version}/docs" filemode="444" dir="docs/" />
			<tarfileset username="root" uid="1" group="root" prefix="javacc-${version}/examples" filemode="444" dir="examples/" />
			<tarfileset username="root" uid="1" group="root" prefix="javacc-${version}" filemode="444" file="LICENSE" />
			<tarfileset username="root" uid="1" group="root" prefix="javacc-${version}/${target-folder}" filemode="444" file="${javacc}" />
		</tar>

		<delete file="${install-name}-distribution.zip" />
		<zip destfile="${install-name}-distribution.zip">
			<zipfileset prefix="javacc-${version}/${target-folder}" filemode="444" file="${javacc}" />
			<zipfileset prefix="javacc-${version}/docs" filemode="444" dir="docs/" />
			<zipfileset prefix="javacc-${version}/examples" filemode="444" dir="examples/" />
			<zipfileset prefix="javacc-${version}" filemode="444" file="LICENSE" />
		</zip>

		<delete dir="." includes="**/*.class" />
		<delete file="${install-name}-sources.tar.gz" />

		<tar destfile="${install-name}-sources.tar.gz" compression="gzip">
			<tarfileset username="root" uid="1" group="root" prefix="javacc-${version}" filemode="444" file="./**" excludes="deployment_pom/**, target/**, temp/**, .svn,CVS,**/*.zip,**/*.tar.gz" />
		</tar>

		<delete file="${install-name}-sources.jar" />
		<zip destfile="${install-name}-sources.jar">
			<zipfileset prefix="javacc-${version}" filemode="444" file="./**" excludes=".svn,CVS,**/*.zip,**/*.tar.gz, deployment_pom/**, target/**, dist/**, temp/**" />
		</zip>
	</target>


	<target name="javadoc">
		<property name="install-name" value="${target-folder}/javacc-${version}" />

		<delete dir="${target-folder}/javadoc" />
		<mkdir dir="${target-folder}/javadoc" />
		<javadoc destdir="${target-folder}/javadoc">
			<fileset dir="${generated-src}" />
			<fileset dir="${java-src}" />
		</javadoc>

		<zip destfile="${install-name}-javadoc.jar" basedir="${target-folder}/javadoc">
		</zip>
	</target>

	<target name="unittest" depends="jar" description="run JUnit unit test cases" unless="true">
		<delete dir="test.tmp" />
		<mkdir dir="test.tmp" />

		<path id="compile-test-classpath">
			<pathelement location="lib/junit.jar" />
			<pathelement location="target/javacc.jar" />
		</path>

		<delete dir="junit" />
		<mkdir dir="junit" />
		<javac srcdir="${test-src}" destdir="junit" classpathref="compile-test-classpath" includeantruntime='false'>
			<src path="${test-src}" />
		</javac>

		<junit printsummary="yes" haltonfailure="no">
			<classpath>
				<pathelement location="junit" />
				<pathelement location="target/javacc.jar" />
				<pathelement location="lib/junit.jar" />
			</classpath>

			<batchtest fork="no" todir=".">
				<fileset dir="junit">
					<include name="**/*Test.*" />
				</fileset>
				<formatter type="failure" />
				<!-- I want to see something ... -->
				<formatter type="plain" usefile="false" />
			</batchtest>
		</junit>

		<!-- Should sort this out properly, in the test. But for now... -->
		<delete file="JavaCCParserTokenManager.java" />
	</target>

	<target name="test" depends="jar, unittest" description="run functional test cases">

		<delete dir="test.tmp" />
		<mkdir dir="test.tmp" />

		<echo message="Executing test"/>
		<ant antfile="build.xml" target="test" dir="test" />

		<echo message="Executing examples"/>
        <copy file="${javacc}" todir="examples/build/libs"/>
        <!--
        Note: we do not pass javacc and other properties there.
        It enables to run the file as the part of build.xml, and on its own.
        -->
        <ant antfile="build.xml" target="test" dir="examples" inheritall="false"/>

	</target>

	<!-- defined maven snapshots and staging repository id and url -->
	<property name="ossrh-snapshots-repository-url" value="https://oss.sonatype.org/content/repositories/snapshots/" />
	<property name="ossrh-staging-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
	<!-- there server id in the Maven settings.xml -->
	<property name="ossrh-server-id" value="ossrh" />

	<target name="echo">
		<!-- replace file="foo.xml" token="$${version}" value="${version}"/ -->
		<echo message="$${version} = ${version}"/>
	</target>

	<target name="deploy" depends="dist" description="deploy snapshot version to Maven snapshot repository">
		<artifact:mvn>
			<arg value="org.apache.maven.plugins:maven-deploy-plugin:2.8:deploy-file" />
			<arg value="-Durl=${ossrh-snapshots-repository-url}" />
			<arg value="-DrepositoryId=${ossrh-server-id}" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${javacc-path}" />
		</artifact:mvn>
	</target>

	<target name="install" depends="jar" description="install version to Maven local repository">
		<artifact:pom id="mypom" file="pom.xml" />
		<artifact:install file="${javacc-path}">
			<pom refid="mypom" />
		</artifact:install>
	</target>

	<!-- before this, update project version (both build.xml and pom.xml) from SNAPSHOT to RELEASE -->
	<target name="stage" depends="dist" description="deploy release version to Maven staging repository">
		<!-- sign and deploy the main artifact -->
		<artifact:mvn>
			<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.5:sign-and-deploy-file" />
			<arg value="-Durl=${ossrh-staging-repository-url}" />
			<arg value="-DrepositoryId=${ossrh-server-id}" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${javacc-path}" />
			<arg value="-Pgpg" />
		</artifact:mvn>

		<!-- sign and deploy the sources artifact -->
		<artifact:mvn>
			<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.5:sign-and-deploy-file" />
			<arg value="-Durl=${ossrh-staging-repository-url}" />
			<arg value="-DrepositoryId=${ossrh-server-id}" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${javacc-sources-path}" />
			<arg value="-Dclassifier=sources" />
			<arg value="-Pgpg" />
		</artifact:mvn>

		<!-- sign and deploy the javadoc artifact -->
		<artifact:mvn>
			<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.5:sign-and-deploy-file" />
			<arg value="-Durl=${ossrh-staging-repository-url}" />
			<arg value="-DrepositoryId=${ossrh-server-id}" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${javacc-javadoc-path}" />
			<arg value="-Dclassifier=javadoc" />
			<arg value="-Pgpg" />
		</artifact:mvn>
	</target>

</project>
