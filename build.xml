<?xml version='1.0' encoding='UTF-8' ?>

<!--
Copyright (c) 2006-2025, Sreeni Viswanadha <sreeni@viswanadha.net>.
Copyright (c) 2024-2025, Marc Mazas <mazas.marc@gmail.com>.
Copyright (c) 2006, Sun Microsystems, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the Sun Microsystems, Inc. nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.
-->

<project name="javacc"
         default="jar"
         basedir="."
         xmlns:jacoco="antlib:org.jacoco.ant"
         xmlns:artifact="antlib:org.apache.maven.artifact.ant"
>

  <!-- Ant tasks definition for JaCoCo tasks (m2e does not accept a property in path) -->
  <taskdef resource="org/jacoco/ant/antlib.xml" uri="antlib:org.jacoco.ant">
    <classpath path="lib/jacocoant-0.8.10.jar" />
  </taskdef>
  <!-- Note: to enable/disable the code coverage, we found shorter to use the agent, versus the coverage tasks
       Note: looks we cannot use properties here in the values -->
  <!--
  <jacoco:agent property="jacocoagentvmparam"
                enabled="true"
                destfile="target/jacoco/jacoco.exec"
                classdumpdir="target/jacoco/dump"
                append="true"
  />
  -->
  <!-- to disable code coverage comment the previous definition and uncomment the next two lines -->
  <property name="jacocoagentvmparam" value="-Ddumkey=dumval" />
  <property name="no_code_coverage" value="true" />
  <!-- Note: setting the jacoco agent property to false leads to the error 
       "Exception in thread "main" java.lang.NoClassDefFoundError", with no class name,
       so we use the workaround of passing a no impact jvm argument
  <jacoco:agent property="jacocoagentvmparam" enabled="false" />
  -->

  <!-- Ant type definition for Maven tasks (m2e does not accept a property in path) -->
  <path id="maven-ant-tasks.classpath" path="lib/maven-ant-tasks-2.1.3.jar" />
  <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
           uri="antlib:org.apache.maven.artifact.ant"
           classpathref="maven-ant-tasks.classpath"
  />

  <!-- Avoids repeating this javac setting -->
  <presetdef name="javac">
    <javac includeantruntime="false" />
  </presetdef>

  <!-- ========== -->
  <!-- Properties -->
  <!-- ========== -->

  <property name="java-src" value="src/main/java" />
  <property name="test-src" value="src/test/java" />
  <property name="resources-src" value="src/main/resources" />
  <property name="generated-src" value="target/generated-sources" />
  <property name="jjtree-generated-src" value="${generated-src}/jjtree/org/javacc/jjtree" />
  <property name="parser-generated-src" value="${generated-src}/javacc/org/javacc/parser" />
  <property name="utils-generated-src" value="${generated-src}/utils/org/javacc/utils" />
  <property name="test-tmp" value="test.tmp" />

  <property name="bootstrap-jar" value="bootstrap/javacc.jar" />
  <property name="jjtree-class-name" value="org.javacc.jjtree.Main" />
  <property name="javacc-class-name" value="org.javacc.parser.Main" />

  <property name="target" value="target" />
  <property name="classes" value="${target}/classes" />

  <property file="${resources-src}/version.properties" />
  <!-- property name="version" value="${version.major}.${version.minor}.${version.patch}-SNAPSHOT" / -->
  <property name="version" value="${version.major}.${version.minor}.${version.patch}" />

  <property name="javacc-jar" value="${target}/javacc.jar" />
  <property name="javacc-last-jar" value="${target}/javacc-last.jar" />

  <property name="javacc-with-version" value="javacc-${version}.jar" />
  <property name="javacc-last-with-version" value="javacc-last-${version}.jar" />
  <property name="javacc-sources-jar" value="javacc-${version}-sources.jar" />
  <property name="javacc-javadoc-jar" value="javacc-${version}-javadoc.jar" />

  <property name="javacc-path" value="${target}/${javacc-with-version}" />
  <property name="javacc-last-path" value="${target}/${javacc-last-with-version}" />
  <property name="javacc-sources-path" value="${target}/${javacc-sources-jar}" />
  <property name="javacc-javadoc-path" value="${target}/${javacc-javadoc-jar}" />

  <property name="javac.source" value="1.8" />
  <property name="javac.target" value="1.8" />

  <!-- Cleans all the generated sources, temporary files, dist files and compiled classes -->
  <target name="clean">
    <delete dir="test.tmp" />
    <delete dir="dist" />
    <delete dir="${target}" />
    <mkdir dir="${target}" />
    <mkdir dir="${classes}" />
    <mkdir dir="${jjtree-generated-src}" />
    <mkdir dir="${parser-generated-src}" />
    <mkdir dir="${utils-generated-src}" />
  </target>


  <!-- ======================== -->
  <!-- BUILD with OLD BOOTSTRAP -->
  <!-- ======================== -->

  <!-- Build the new version with the old jar (current bootstrap jar) and create the new version jar
       (named javacc.jar with a copy named javacc-x.y.z.jar)  -->
  <!-- Here the new version jar does not benefit from enhancements of JavaCC itself (e.g. performance) -->
  <!-- The tests will benefit from these enhancements -->
  <target name="jar">
    <antcall target="compile_create-jars" />
  </target>

  <!-- Be careful not to include the test files in the distribution. -->
  <target name="jar-classes-check">
    <condition property="jar-classes.uptodate">
      <!-- An IDE clean should normally have deleted the classes but not the jars, so
           specifying the directories will check their timestamps (modified by deletes) -->
      <and>
        <uptodate targetfile="${javacc-path}">
          <srcresources>
            <fileset dir="${java-src}" />
            <dirset dir="${java-src}" />
            <fileset dir="${resources-src}" />
            <dirset dir="${resources-src}" />
            <dirset dir="${classes}" />
          </srcresources>
        </uptodate>
        <uptodate targetfile="${classes}">
          <srcresources>
            <fileset dir="${java-src}" />
            <dirset dir="${java-src}" />
            <fileset dir="${resources-src}" />
            <dirset dir="${resources-src}" />
          </srcresources>
        </uptodate>
      </and>
    </condition>
    <echo message="jar-classes.uptodate: ${jar-classes.uptodate}" />
  </target>

  <!-- Compiles with old bootstrap jar and create new jars -->
  <target name="compile_create-jars" depends="jar-classes-check" unless="${jar-classes.uptodate}">
    <antcall target="compile" />
    <jar jarfile="${javacc-jar}" basedir="${classes}" compress="true" />
    <copy file="${javacc-jar}" tofile="${javacc-path}" />
  </target>

  <!-- Compiles jj, jjt & java source & generated files with bootstrap jar -->
  <target name="compile" depends="clean">
    <antcall target="compile-sub">
      <param name="param-jar" value="${bootstrap-jar}" />
    </antcall>
  </target>


  <!-- ==================== -->
  <!-- BUILD a DISTRIBUTION -->
  <!-- ==================== -->

  <!-- Build a distribution -->
  <target name="dist" depends="jar, javadoc" description="build a distribution">
    <property name="install-name" value="${target}/javacc-${version}" />

    <delete file="${install-name}-distribution.tar.gz" />
    <tar destfile="${install-name}-distribution.tar.gz" compression="gzip">
      <tarfileset username="root"
                  uid="1"
                  group="root"
                  prefix="javacc-${version}/docs"
                  filemode="444"
                  dir="docs/"
      />
      <tarfileset username="root"
                  uid="1"
                  group="root"
                  prefix="javacc-${version}/examples"
                  filemode="444"
                  dir="examples/"
      />
      <tarfileset username="root"
                  uid="1"
                  group="root"
                  prefix="javacc-${version}"
                  filemode="444"
                  file="LICENSE"
      />
      <tarfileset username="root"
                  uid="1"
                  group="root"
                  prefix="javacc-${version}/${target}"
                  filemode="444"
                  file="${javacc-jar}"
      />
    </tar>

    <delete file="${install-name}-distribution.zip" />
    <zip destfile="${install-name}-distribution.zip">
      <zipfileset prefix="javacc-${version}/${target}" filemode="444" file="${javacc-jar}" />
      <zipfileset prefix="javacc-${version}/docs" filemode="444" dir="docs/" />
      <zipfileset prefix="javacc-${version}/examples" filemode="444" dir="examples/" />
      <zipfileset prefix="javacc-${version}" filemode="444" file="LICENSE" />
    </zip>

    <delete dir="." includes="**/*.class" />
    <delete file="${install-name}-sources.tar.gz" />

    <tar destfile="${install-name}-sources.tar.gz" compression="gzip">
      <tarfileset username="root"
                  uid="1"
                  group="root"
                  prefix="javacc-${version}"
                  filemode="444"
                  file="./**"
                  excludes="deployment_pom/**, target/**, temp/**, .svn,CVS,**/*.zip,**/*.tar.gz"
      />
    </tar>

    <delete file="${install-name}-sources.jar" />
    <zip destfile="${install-name}-sources.jar">
      <zipfileset prefix="javacc-${version}"
                  filemode="444"
                  file="./**"
                  excludes=".svn,CVS,**/*.zip,**/*.tar.gz, deployment_pom/**, target/**, dist/**, temp/**"
      />
    </zip>

  </target>

  <!-- Build javadoc -->
  <target name="javadoc">

    <property name="install-name" value="${target}/javacc-${version}" />

    <delete dir="${target}/javadoc" />
    <mkdir dir="${target}/javadoc" />
    <javadoc destdir="${target}/javadoc">
      <fileset dir="${generated-src}" />
      <fileset dir="${java-src}" />
    </javadoc>

    <zip destfile="${install-name}-javadoc.jar" basedir="${target}/javadoc">
    </zip>

  </target>


  <!-- ================================== -->
  <!-- BUILD with the LAST GENERATED JAR -->
  <!-- ================================= -->

  <!-- Build the new version with the new jar and create another new jar
       (named javacc-last.jar with a copy named javacc-last-x.y.z.jar)  -->
  <!-- Here the new version jar benefits from enhancements of JavaCC itself (e.g. performance) -->
  <!-- The bootstrap jar should be regularly manually updated with a stable last jar -->
  <target name="jar-last" description="build javacc.jar with last jar">
    <antcall target="compile-last" />
    <jar jarfile="${javacc-last-jar}" basedir="${classes}" compress="true" />
    <copy file="${javacc-last-jar}" tofile="${javacc-last-path}" />
  </target>

  <!-- Compiles jj, jjt & java source & generated files with the last generated jar -->
  <target name="compile-last" depends="">
    <antcall target="compile-sub">
      <param name="param-jar" value="${javacc-jar}" />
    </antcall>
  </target>


  <!-- ============ -->
  <!-- BUILD COMMON -->
  <!-- ============ -->

  <!-- Compiles jj, jjt & java source & generated files with a given jar passed as a parameter-->
  <target name="compile-sub">

    <!-- ReGenerate the Java CC Main Parser with the new jar -->
    <java classname="${javacc-class-name}"
          classpath="${param-jar}"
          dir="${basedir}/src/main/javacc"
          fork="true"
    >
      <arg value="-OUTPUT_DIRECTORY=${basedir}/${parser-generated-src}" />
      <arg value="JavaCC.jj" />
    </java>

    <!-- This class is overwritten -->
    <delete file="${parser-generated-src}/Token.java" />

    <!-- ReGenerate the JJTree Parser Definition (from the tree definition) -->
    <java classname="${jjtree-class-name}"
          classpath="${param-jar}"
          dir="${basedir}/src/main/jjtree"
          fork="true"
    >
      <arg value="-OUTPUT_DIRECTORY=${basedir}/${jjtree-generated-src}" />
      <arg value="JJTree.jjt" />
    </java>

    <!-- Generate the JJTree Parser with the new jar  -->
    <java classname="${javacc-class-name}"
          classpath="${param-jar}"
          dir="${basedir}/${jjtree-generated-src}"
          fork="true"
    >
      <arg value="-OUTPUT_DIRECTORY=${basedir}/${jjtree-generated-src}" />
      <arg value="JJTree.jj" />
    </java>

    <!-- Delete the .jj file created by the jjtree program and the classes that were overwritten and already added into the main source path -->
    <delete file="${jjtree-generated-src}/JJTree.jj" />
    <delete file="${jjtree-generated-src}/ASTBNF.java" />
    <delete file="${jjtree-generated-src}/ASTBNFAction.java" />
    <delete file="${jjtree-generated-src}/ASTBNFDeclaration.java" />
    <delete file="${jjtree-generated-src}/ASTBNFNodeScope.java" />
    <delete file="${jjtree-generated-src}/ASTCompilationUnit.java" />
    <delete file="${jjtree-generated-src}/ASTExpansionNodeScope.java" />
    <delete file="${jjtree-generated-src}/ASTGrammar.java" />
    <delete file="${jjtree-generated-src}/ASTJavacode.java" />
    <delete file="${jjtree-generated-src}/ASTJavacodeBody.java" />
    <delete file="${jjtree-generated-src}/ASTNodeDescriptor.java" />
    <delete file="${jjtree-generated-src}/ASTNodeDescriptorExpression.java" />
    <delete file="${jjtree-generated-src}/ASTOptionBinding.java" />
    <delete file="${jjtree-generated-src}/ASTOptions.java" />
    <delete file="${jjtree-generated-src}/JJTreeParserVisitor.java" />
    <delete file="${jjtree-generated-src}/JJTreeParserDefaultVisitor.java" />
    <delete file="${jjtree-generated-src}/Token.java" />

    <!-- ReGenerate the Condition Parser with the new jar -->
    <java classname="${javacc-class-name}"
          classpath="${param-jar}"
          dir="${basedir}/src/main/javacc"
          fork="true"
    >
      <arg value="-OUTPUT_DIRECTORY=${basedir}/${utils-generated-src}" />
      <arg value="ConditionParser.jj" />
    </java>

    <copy todir="${classes}/templates">
      <fileset dir="${resources-src}/templates" />
    </copy>

    <copy file="${resources-src}/version.properties" todir="${classes}" />

    <javac srcdir="${java-src}" destdir="${classes}" debug="true" classpath="">
      <src path="${java-src}" />
      <src path="${generated-src}" />
      <src path="${resources-src}" />
    </javac>

  </target>


  <!-- ===== -->
  <!-- TESTS -->
  <!-- ===== -->

  <!-- Run "unit" tests under /src/test/java -->
  <target name="unittest" depends="jar" description="run JUnit unit test cases" unless="true">
    <delete dir="test.tmp" />
    <mkdir dir="test.tmp" />

    <path id="compile-test-classpath">
      <pathelement location="lib/junit.jar" />
      <pathelement location="target/javacc.jar" />
    </path>

    <delete dir="junit" />
    <mkdir dir="junit" />
    <javac srcdir="${test-src}" destdir="junit" classpathref="compile-test-classpath">
      <src path="${test-src}" />
    </javac>

    <junit printsummary="yes" haltonfailure="no">
      <classpath>
        <pathelement location="junit" />
        <pathelement location="target/javacc.jar" />
        <pathelement location="lib/junit.jar" />
      </classpath>

      <batchtest fork="no" todir=".">
        <fileset dir="junit">
          <include name="**/*Test.*" />
        </fileset>
        <formatter type="failure" />
        <!-- I want to see something ... -->
        <formatter type="plain" usefile="false" />
      </batchtest>
    </junit>

    <!-- Should sort this out properly, in the test. But for now... -->
    <delete file="JavaCCParserTokenManager.java" />
  </target>

  <target name="test" depends="jar, unittest" description="run functional test cases">

    <delete dir="test.tmp" />
    <mkdir dir="test.tmp" />

    <!-- Run "functional-tests" tests under /test -->
    <echo message="tests under test" />

    <ant antfile="build.xml" target="test" dir="test" />

    <!-- Run "functional" tests under /examples -->
    <echo message="tests under /examples" />

    <echo message="GUIParsing/ParserVersion" />

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/CORBA-IDL examples/CORBA-IDL/IDL.jj" />
    </java>

    <javac srcdir="${test-tmp}/CORBA-IDL" />

    <copy todir="${test-tmp}/CORBA-IDL/">
      <fileset dir="examples/CORBA-IDL">
        <include name="*.idl" />
      </fileset>
    </copy>

    <java failonerror="true"
          fork="true"
          classname="IDLParser"
          classpath="${test-tmp}/CORBA-IDL/"
          outputproperty="test.corba.out"
    >
      <arg line="${test-tmp}/CORBA-IDL/Hello.idl" />
    </java>

    <echo>${test.corba.out}</echo>

    <fail message="CORBA failed">
      <condition>
        <not>
          <contains string="${test.corba.out}" substring="IDL file parsed successfully" />
        </not>
      </condition>
    </fail>

    <echo message="GUIParsing/ParserVersion" />

    <copy todir="${test-tmp}/GUIParsing/ParserVersion">
      <fileset dir="examples/GUIParsing/ParserVersion">
        <include name="*.java" />
      </fileset>
    </copy>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/GUIParsing/ParserVersion examples/GUIParsing/ParserVersion/CalcInput.jj"
      />
    </java>

    <javac srcdir="${test-tmp}/GUIParsing/ParserVersion" />

    <!--
		<echo />

	    <copy todir="${test-tmp}/GUIParsing/TokenMgrVersion">
	      <fileset dir="examples/GUIParsing/TokenMgrVersion">
	        <include name="*.java" />
	      </fileset>
	    </copy>
	
	    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
	      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/GUIParsing/TokenMgrVersion examples/GUIParsing/TokenMgrVersion/CalcInput.jj" />
	    </java>
	    
	    <javac srcdir="${test-tmp}/GUIParsing/TokenMgrVersion"/>
	
    -->

    <echo message="Interpreter" />

    <copy todir="${test-tmp}/Interpreter">
      <fileset dir="examples/Interpreter">
        <include name="*.java" />
      </fileset>
    </copy>

    <java failonerror="true" fork="true" classname="jjtree" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Interpreter examples/Interpreter/SPL.jjt" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Interpreter ${test-tmp}/Interpreter/SPL.jj" />
    </java>

    <javac srcdir="${test-tmp}/Interpreter" />

    <copy todir="${test-tmp}/Interpreter/">
      <fileset dir="examples/Interpreter/">
        <include name="*.spl" />
      </fileset>
    </copy>

    <java failonerror="true"
          fork="true"
          classname="SPL"
          classpath="${test-tmp}/Interpreter/"
          inputstring="3"
          outputproperty="spl.out1"
    >
      <arg line="${test-tmp}/Interpreter/fact.spl" />
    </java>
    <echo>${spl.out1}</echo>
    <fail message="SPL fact parse failed">
      <condition>
        <not>
          <contains string="${spl.out1}" substring="Value of fact : 6" />
        </not>
      </condition>
    </fail>
    <java failonerror="true"
          fork="true"
          classname="SPL"
          classpath="${test-tmp}/Interpreter/"
          inputstring="3"
          outputproperty="spl.out2"
    >
      <arg line="${test-tmp}/Interpreter/odd.spl" />
    </java>
    <echo>${spl.out2}</echo>
    <fail message="SPL odd parse failed">
      <condition>
        <not>
          <contains string="${spl.out2}" substring="Value of odd : true" />
        </not>
      </condition>
    </fail>
    <java failonerror="true"
          fork="true"
          classname="SPL"
          classpath="${test-tmp}/Interpreter/"
          inputstring="9"
          outputproperty="spl.out3"
    >
      <arg line="${test-tmp}/Interpreter/sqrt.spl" />
    </java>
    <echo>${spl.out3}</echo>
    <fail message="SPL sqrt parse failed">
      <condition>
        <not>
          <contains string="${spl.out3}" substring="Value of sqrt : 3" />
        </not>
      </condition>
    </fail>

    <echo message="java/JJTreeExamples.eg1" />

    <java failonerror="true" fork="true" classname="jjtree" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/java/JJTreeExamples.eg1 examples/JJTreeExamples/java/eg1.jjt"
      />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/java/JJTreeExamples.eg1 ${test-tmp}/java/JJTreeExamples.eg1/eg1.jj"
      />
    </java>

    <javac srcdir="${test-tmp}/java/JJTreeExamples.eg1" />

    <java failonerror="true"
          fork="true"
          classname="Eg1"
          classpath="${test-tmp}/java/JJTreeExamples.eg1/"
          inputstring="(a + b) * (c + 1);"
          outputproperty="jjtree.eg1.out"
    >
    </java>
    <echo>${jjtree.eg1.out}</echo>
    <fail message="JJTree eg1 parse failed">
      <condition>
        <not>
          <contains string="${jjtree.eg1.out}" substring="Thank you." />
        </not>
      </condition>
    </fail>

    <echo message="java/JJTreeExamples.eg2" />

    <copy todir="${test-tmp}/java/JJTreeExamples.eg2">
      <fileset dir="examples/JJTreeExamples/java">
        <include name="*.java" />
        <exclude name="Eg4DumpVisitor.java" />
        <exclude name="ASTMyOtherID.java" />
      </fileset>
    </copy>

    <java failonerror="true" fork="true" classname="jjtree" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/java/JJTreeExamples.eg2 examples/JJTreeExamples/java/eg2.jjt"
      />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/java/JJTreeExamples.eg2 ${test-tmp}/java/JJTreeExamples.eg2/eg2.jj"
      />
    </java>

    <javac srcdir="${test-tmp}/java/JJTreeExamples.eg2" />

    <java failonerror="true"
          fork="true"
          classname="Eg2"
          classpath="${test-tmp}/java/JJTreeExamples.eg2/"
          inputstring="(a + b) * (c + 1);"
          outputproperty="jjtree.eg2.out"
    >
    </java>
    <echo>${jjtree.eg2.out}</echo>
    <fail message="JJTree eg2 parse failed">
      <condition>
        <not>
          <contains string="${jjtree.eg2.out}" substring="Thank you." />
        </not>
      </condition>
    </fail>

    <echo message="java/JJTreeExamples.eg3" />

    <copy todir="${test-tmp}/java/JJTreeExamples.eg3">
      <fileset dir="examples/JJTreeExamples/java">
        <include name="*.java" />
        <exclude name="Eg4DumpVisitor.java" />
        <exclude name="ASTMyOtherID.java" />
      </fileset>
    </copy>

    <java failonerror="true" fork="true" classname="jjtree" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/java/JJTreeExamples.eg3 examples/JJTreeExamples/java/eg3.jjt"
      />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/java/JJTreeExamples.eg3 ${test-tmp}/java/JJTreeExamples.eg3/eg3.jj"
      />
    </java>

    <javac srcdir="${test-tmp}/java/JJTreeExamples.eg3" />

    <java failonerror="true"
          fork="true"
          classname="Eg3"
          classpath="${test-tmp}/java/JJTreeExamples.eg3/"
          inputstring="(a + b) * (c + 1);"
          outputproperty="jjtree.eg3.out"
    >
    </java>
    <echo>${jjtree.eg3.out}</echo>
    <fail message="JJTree eg3 parse failed">
      <condition>
        <not>
          <contains string="${jjtree.eg3.out}" substring="Thank you." />
        </not>
      </condition>
    </fail>

    <echo message="java/JJTreeExamples.eg4" />

    <copy todir="${test-tmp}/java/JJTreeExamples.eg4">
      <fileset dir="examples/JJTreeExamples/java">
        <include name="*.java" />
      </fileset>
    </copy>

    <java failonerror="true" fork="true" classname="jjtree" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/java/JJTreeExamples.eg4 examples/JJTreeExamples/java/eg4.jjt"
      />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/java/JJTreeExamples.eg4 ${test-tmp}/java/JJTreeExamples.eg4/eg4.jj"
      />
    </java>

    <javac srcdir="${test-tmp}/java/JJTreeExamples.eg4" debug="true" />

    <java failonerror="true"
          fork="true"
          classname="Eg4"
          classpath="${test-tmp}/java/JJTreeExamples.eg4/"
          inputstring="(a + b) * (c + 1);"
          outputproperty="jjtree.eg4.out"
    >
    </java>
    <echo>${jjtree.eg4.out}</echo>
    <fail message="JJTree eg4 parse failed">
      <condition>
        <not>
          <contains string="${jjtree.eg4.out}" substring="Thank you." />
        </not>
      </condition>
    </fail>

    <echo message="JavaCCGrammar" />

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/JavaCCGrammar examples/JavaCCGrammar/JavaCC.jj" />
    </java>

    <javac srcdir="${test-tmp}/JavaCCGrammar" />

    <echo message="examples/JavaGrammars/1.5" />

    <ant antfile="build.xml" target="compile-and-test" dir="examples/JavaGrammars/1.5" />
    <ant antfile="build.xml" target="clean" dir="examples/JavaGrammars/1.5" />

    <echo message="Lookahead.eg1 to eg10" />

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Lookahead.eg1 examples/Lookahead/Example1.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Lookahead.eg2 examples/Lookahead/Example2.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Lookahead.eg3 examples/Lookahead/Example3.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Lookahead.eg4 examples/Lookahead/Example4.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Lookahead.eg5 examples/Lookahead/Example5.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Lookahead.eg6 examples/Lookahead/Example6.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Lookahead.eg7 examples/Lookahead/Example7.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Lookahead.eg8 examples/Lookahead/Example8.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Lookahead.eg9 examples/Lookahead/Example9.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Lookahead.eg10 examples/Lookahead/Example10.jj" />
    </java>

    <echo message="MailProcessing" />

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/MailProcessing examples/MailProcessing/Digest.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/MailProcessing examples/MailProcessing/Faq.jj" />
    </java>

    <javac srcdir="${test-tmp}/MailProcessing" />

    <echo message="Obfuscator" />

    <copy todir="${test-tmp}/Obfuscator">
      <fileset dir="examples/Obfuscator">
        <include name="*.java" />
      </fileset>
    </copy>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Obfuscator examples/Obfuscator/Java1.1.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Obfuscator examples/Obfuscator/IdsFile.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Obfuscator examples/Obfuscator/MapFile.jj" />
    </java>

    <javac srcdir="${test-tmp}/Obfuscator" />

    <!-- Test cases for SimpleExamples -->
    <echo message="SimpleExamples" />

    <mkdir dir="${test-tmp}/SimpleExamples" />

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/SimpleExamples examples/SimpleExamples/Simple1.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/SimpleExamples examples/SimpleExamples/Simple2.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/SimpleExamples examples/SimpleExamples/Simple3.jj" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/SimpleExamples examples/SimpleExamples/NL_Xlator.jj"
      />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/SimpleExamples examples/SimpleExamples/IdList.jj" />
    </java>

    <!-- Test cases for Java 7 syntax features -->
    <echo message="java7features" />

    <mkdir dir="${test-tmp}/java7features" />

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/java7features test/java7features/Parser.jj" />
    </java>

    <echo message="Transformer" />
    <copy todir="${test-tmp}/Transformer">
      <fileset dir="examples/Transformer">
        <include name="*.java" />
      </fileset>
    </copy>

    <java failonerror="true" fork="true" classname="jjtree" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Transformer examples/Transformer/ToyJava.jjt" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/Transformer ${test-tmp}/Transformer/ToyJava.jj" />
    </java>

    <javac srcdir="${test-tmp}/Transformer" />

    <echo message="VTransformer" />

    <copy todir="${test-tmp}/VTransformer">
      <fileset dir="examples/VTransformer">
        <include name="*.java" />
      </fileset>
    </copy>

    <java failonerror="true" fork="true" classname="jjtree" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/VTransformer examples/VTransformer/Java1.1.jjt" />
    </java>

    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/VTransformer ${test-tmp}/VTransformer/Java1.1.jj" />
    </java>
    <javac srcdir="${test-tmp}/VTransformer" />

    <!-- 2014/05/09 - New tests to test that TOKEN_MANAGER_USES_PARSER has no effect if static is true -->
    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/TestTokenManagerUsesParser test/TestTokenManagerUsesParser/TestTokenManagerUsesParser.jj"
      />
    </java>

    <echo message="TestTokenManagerUsesParser" />

    <javac srcdir="${test-tmp}/TestTokenManagerUsesParser" />

    <!-- 2014/05/09 - New tests to test that TOKEN_MANAGER_USES_PARSER works as expected if static is false -->
    <java failonerror="true" fork="true" classname="javacc" classpath="${javacc-jar}">
      <arg line="-OUTPUT_DIRECTORY=${test-tmp}/TestTokenManagerUsesParser2 test/TestTokenManagerUsesParser2/TestTokenManagerUsesParser2.jj"
      />
    </java>

    <javac srcdir="${test-tmp}/TestTokenManagerUsesParser2" />

  </target>


  <!-- ===== -->
  <!-- MAVEN -->
  <!-- ===== -->

  <!-- defined maven snapshots and staging repository id and url -->
  <property name="ossrh-snapshots-repository-url"
            value="https://oss.sonatype.org/content/repositories/snapshots/"
  />
  <property name="ossrh-staging-repository-url"
            value="https://oss.sonatype.org/service/local/staging/deploy/maven2/"
  />
  <!-- there server id in the Maven settings.xml -->
  <property name="ossrh-server-id" value="ossrh" />

  <target name="echo">
    <!-- replace file="foo.xml" token="$${version}" value="${version}"/ -->
    <echo message="$${version} = ${version}" />
  </target>

  <target name="deploy"
          depends="dist"
          description="deploy snapshot version to Maven snapshot repository"
  >
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-deploy-plugin:2.8:deploy-file" />
      <arg value="-Durl=${ossrh-snapshots-repository-url}" />
      <arg value="-DrepositoryId=${ossrh-server-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${javacc-path}" />
    </artifact:mvn>
  </target>

  <target name="install" depends="jar" description="install version to Maven local repository">
    <artifact:pom id="mypom" file="pom.xml" />
    <artifact:install file="${javacc-path}">
      <pom refid="mypom" />
    </artifact:install>
  </target>

  <!-- before this, update project version (both build.xml and pom.xml) from SNAPSHOT to RELEASE -->
  <target name="stage"
          depends="dist"
          description="deploy release version to Maven staging repository"
  >
    <!-- sign and deploy the main artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.5:sign-and-deploy-file" />
      <arg value="-Durl=${ossrh-staging-repository-url}" />
      <arg value="-DrepositoryId=${ossrh-server-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${javacc-path}" />
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- sign and deploy the sources artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.5:sign-and-deploy-file" />
      <arg value="-Durl=${ossrh-staging-repository-url}" />
      <arg value="-DrepositoryId=${ossrh-server-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${javacc-sources-path}" />
      <arg value="-Dclassifier=sources" />
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- sign and deploy the javadoc artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.5:sign-and-deploy-file" />
      <arg value="-Durl=${ossrh-staging-repository-url}" />
      <arg value="-DrepositoryId=${ossrh-server-id}" />
      <arg value="-DpomFile=pom.xml" />
      <arg value="-Dfile=${javacc-javadoc-path}" />
      <arg value="-Dclassifier=javadoc" />
      <arg value="-Pgpg" />
    </artifact:mvn>
  </target>

</project>
